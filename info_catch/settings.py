"""
Django settings for info_catch project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vs7m^ux&1^k(!ylkq#tm447ti%t(hzb##e&^-$(t*agwpw!wt1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['statb.maimob.net', '127.0.0.1', '192.168.199.234', '47.100.136.167']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_results',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'info_catch.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR+'/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'info_catch.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_django',
        #'NAME': 'django_test',
        'USER': 'root',
        'PASSWORD': 'maimob123',
        #'PASSWORD': 'songchao',
        'HOST': '10.28.100.60',
        #'HOST': 'localhost',
        'PORT': '3306',
    },
    'db_auth': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'db_django',
        #'NAME': 'django_test',
        'USER': 'root',
        'PASSWORD': 'maimob123',
        #'PASSWORD': 'songchao',
        'HOST': '10.28.100.60',
        #'HOST': 'localhost',
        'PORT': '3306',
    }
}

DATABASE_ROUTERS = ['info_catch.routers.AuthRouter']

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(os.path.join(BASE_DIR, 'static')),
)


# Celery settings
CELERY_BROKER_URL = 'amqp://test:test123@47.97.20.178:5672/'
#CELERY_BROKER_URL = 'amqp://test:test123@192.168.199.133:5672/'
CELERY_RESULT_BACKEND = 'django-db'
from kombu import Exchange,Queue
CELERY_QUEUES = (
    Queue('default', Exchange('default'), routing_key='default'),
    #Queue('cell_location', Exchange('cell_location'), routing_key='cell_location'),
    Queue('catch_deviceinfo', Exchange('catch_deviceinfo'), routing_key='catch_deviceinfo'),
    Queue('catch_allinfo', Exchange('catch_allinfo'), routing_key='catch_allinfo'),
)
CELERY_ROUTES = {
    #'info_catch.tasks.save_cell_location': {'queue': 'cell_location', 'routing_key': 'cell_location'},
    'info_catch.tasks.save_catch_deviceinfo': {'queue': 'catch_deviceinfo', 'routing_key': 'catch_deviceinfo'},
    'info_catch.tasks.save_catch_allinfo': {'queue': 'catch_allinfo', 'routing_key': 'catch_allinfo'},
}

# Logger
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }, # 针对 DEBUG = True 的情况
    },
    'formatters': {
        'standard': {
            'format': '%(levelname)s %(asctime)s %(pathname)s %(filename)s %(module)s %(funcName)s %(lineno)d: %(message)s'
        }, # 对日志信息进行格式化，每个字段对应了日志格式中的一个字段，更多字段参考官网文档，我认为这些字段比较合适，输出类似于下面的内容
        # INFO 2016-09-03 16:25:20,067 /home/ubuntu/mysite/views.py views.py views get 29: some info...
        'simple': {#简单
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter':'standard'
        },
        'file_handler': {
             'level': 'INFO',
             'class': 'logging.handlers.TimedRotatingFileHandler',
             'filename': '/data/log/python/info_catch/info.log',
             'formatter': 'standard',
             'when': 'D',
             'backupCount': 100
        }, # 用于文件输出
        'console':{
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers' :['file_handler', 'console'],
            'level':'DEBUG',
            'propagate': True # 是否继承父类的log信息
        }, # handlers 来自于上面的 handlers 定义的内容
        'django.request': {
            'handlers': ['mail_admins', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'info_catch': {
            'handlers' :['file_handler', 'console'],
            'level':'DEBUG',
            'propagate': True # 是否继承父类的log信息
        },
    }
}
